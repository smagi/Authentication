@page "/register"
@using WebAuth.Client.Services
@using WebAuth.Client.Components
@using WebAuth.Client.Models.Register

@inject UserRegistrationService UserRegistrationService

<PageTitle>Register</PageTitle>

<h1>Register</h1>

@if(_succeeded)
{
    <p>Registration successful!<a href="login">Click here to login</a></p>
}
else
{
    <EditForm Model="@_userRegister" OnValidSubmit="@HandleValidSubmit">
        <CustomValidation @ref="_customValidation" />
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mb-3">
            <InputText class="form-control" id="Email" @bindValue="_userRegister.Email" aria-placeholder="Email"/>
        </div>
        <div class="mb-3">
            <InputText class="form-control" id="Password" @bindValue="_userRegister.Password" aria-placeholder="Password"/>
        </div>
        <div class="mb-3">
            <InputText class="form-control" id="ConfirmPassword" @bindValue="_userRegister.ConfirmPassword" aria-placeholder="Confirm password"/>
        </div>

        @if(!_registering)
        {
            <button class="btn btn-primary" type="submit">Submit</button>
        }
        else
        {
            <p>
                Registering...
            </p>
        }

    </EditForm>
}

@code {
    private UserRegister _userRegister= new();
    private CustomValidation? _customValidation;
    private bool _registering;
    private bool _succeeded; 

    private async Task HandleValidSubmit()
    {
        _registering = true;

        var result = await UserRegistrationService.Register(_userRegister);

        if(result.Succeesed)
        {
            _succeeded = true;
        }
        else
        {
            _customValidation?.ClearErrors();

            var errors = new Dictionary<string, List<string>>();
            errors.Add(string.Empty, result.Errors!.ToList());

            _customValidation?.DisplayErrors(errors);
        }
        _registering = false;
    }
}