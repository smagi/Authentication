@page "/register"
@using WebAuth.Client.Services
@using WebAuth.Client.Components
@using WebAuth.Client.Models.Register

@inject IUserRegistrationService UserRegistrationService

<PageTitle>Register</PageTitle>

<div class="card text-center">
    <div class="card-body">
        <h5 class="card-title">Register</h5>
        @if(_succeeded)
        {
            <p>Registration successful! <a href="login">Click here to login</a></p>
        }
        else
        {
            <EditForm Model="@_userRegister" OnValidSubmit="@HandleValidSubmit">

                <CustomValidation @ref="_customValidation" />
                <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" id="Email" @bind-Value="_userRegister.Email" placeholder="Email"/>
                        <ValidationMessage For="@(() => _userRegister.Email)" />
                    </div>
                    <div class="form-group">
                        <InputText class="form-control" id="Password" @bind-Value="_userRegister.Password" placeholder="Password" 
                        type="password"/>
                        <ValidationMessage For="@(() => _userRegister.Password)" />
                    </div>
                    <div class="form-group">
                        <InputText class="form-control" id="ConfirmPassword" @bind-Value="_userRegister.ConfirmPassword" placeholder="Confirm Password" type="password"/>
                        <ValidationMessage For="@(() => _userRegister.ConfirmPassword)" />
                    </div>

                    <button disabled="@_registering" class="btn btn-primary">
                        @if (@_registering) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Register
                    </button>
                    <NavLink href="/login" class="btn btn-link">Cancel</NavLink>
            </EditForm>
        }
    </div>
</div>



@code {
    public UserRegister _userRegister= new();
    public CustomValidation? _customValidation;
    private bool _registering;
    private bool _succeeded; 

    private async Task HandleValidSubmit()
    {
        _registering = true;

        var result = await UserRegistrationService.Register(_userRegister);

        if(result.Succeesed)
        {
            _succeeded = true;
        }
        else
        {
            _customValidation?.ClearErrors();

            var errors = new Dictionary<string, List<string>>();
            errors.Add(string.Empty, result.Errors!.ToList());

            _customValidation?.DisplayErrors(errors);
        }
        _registering = false;
    }
}