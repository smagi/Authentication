@page "/login"
@using WebAuth.Client.Models.Login
@using WebAuth.Client.Components
@using WebAuth.Client.Services

@inject IUserLoginService LoginService
@inject IMessageAlertService MessageAlertService;
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<EditForm Model="@_userLogin" OnValidSubmit="@HandleValidSubmit">
    <CustomValidation @ref="_customValidation" />
    <DataAnnotationsValidator/>
    <ValidationSummary/>
                <div class="row d-flex align-items-center">
                    <div class="col-md-7 col-lg-5 col-xl-5">

                            <h3 class="fw-normal mb-3 pb-3">Log In</h3>

                            <div class="form-outline mb-4">
                                <InputText class="form-control" id="Email" @bind-Value="_userLogin.Email" placeholder="Email"/>
                                <ValidationMessage For="@(() => _userLogin.Email)" />
                            </div>
                            <div class="form-outline mb-4">
                                <InputText class="form-control" id="Password" @bind-Value="_userLogin.Password" placeholder="Password" 
                                type="password"/>
                                <ValidationMessage For="@(() => _userLogin.Password)" />
                            </div>

                            <button disabled="@_loggingIn" class="btn btn-primary">
                                @if (@_loggingIn) 
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Log In
                            </button>
                    </div>
                </div>
            </EditForm>

@code{
    private UserLogin _userLogin = new();
    private CustomValidation? _customValidation;
    private bool _loggingIn;

    private async Task HandleValidSubmit()
    {
        _loggingIn = true;

        var result = await LoginService.Login(_userLogin);

        if(result!.Succeeded)
        {
            NavigationManager.NavigateTo("Index");
        }
        else
        {
            MessageAlertService.Error(result.Message!);

            StateHasChanged();
            //_customValidation?.ClearErrors();

            //var errors = new Dictionary<string, List<string>>();
            //errors.Add(string.Empty, new List<string>{ result.Message! });

            //_customValidation?.DisplayErrors(errors);
        }

        _loggingIn = false;
    }
}