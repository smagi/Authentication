@page "/login"
@using Api.Contracts.Dtos.Login
@using WebAuth.Client.Components
@using WebAuth.Client.Clients

@inject AuthenticationHttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="@_userLoginDto" OnValidSubmit="@HandleValidSubmit">
    <CustomValidation @ref="_customValidation" />
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <InputText class="form-control" id="Email" @bind-Value="_userLoginDto.Email" placeholder="Email"/>
    </div>
    <div class="mb-3">
        <InputText class="form-control" id="Password" @bind-Value="_userLoginDto.Password" placeholder="Password"/>
    </div>

    @if(_loggingIn)
    {
        <p>Logging in...</p>
    }
    else
    {
        <button class="btn btn-primary" type="submit">Submit</button>
    }

</EditForm>

@code{
    private UserLoginDto _userLoginDto = new();
    private CustomValidation? _customValidation;
    private bool _loggingIn;

    private async Task HandleValidSubmit()
    {
        _loggingIn = false;

        var result = await Http.LoginUser(_userLoginDto);

        if(result!.Succeeded)
        {
            NavigationManager.NavigateTo("");
        }
        else
        {
            _customValidation?.ClearErrors();

            var errors = new Dictionary<string, List<string>>();
            errors.Add(string.Empty, new List<string>{ result.Message! });

            _customValidation?.DisplayErrors(errors);
        }

        _loggingIn = false;
    }
}