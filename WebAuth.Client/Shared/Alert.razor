@using WebAuth.Client.Services;

@implements IDisposable
@inject IMessageAlertService MessageAlertService;
@inject NavigationManager NavigationManager;

@foreach (var alert in alerts)
{
    <div class="@CssClass(alert)">
        <a class="close" @onclick="@(() => RemoveAlert(alert))">&times;</a>
        <span>@alert.Message</span>
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}


@code{
    [Parameter]
    public string? Id { get; set; } = "default-alert";
    [Parameter]
    public bool Fade { get; set; } = true;
    private List<Models.Alert> alerts = new();
    public void Dispose()
    { 
        MessageAlertService.OnAlert -= OnAlert;
        NavigationManager.LocationChanged -= OnLocationChange!;
    }
    protected override void OnInitialized()
    {
        MessageAlertService.OnAlert += OnAlert;
        NavigationManager.LocationChanged += OnLocationChange!;
    }

    private async void OnAlert(Models.Alert alert)
    {
        if(alert.Id != Id)
            return;

        if (alert.Message == null)
        {
            alerts.RemoveAll(a => !a.KeepAfterRouteChange);
            alerts.ForEach(a => a.KeepAfterRouteChange = false);
        }
        else
        {
            alerts.Add(alert);
            StateHasChanged();

            if (alert.AutoClose)
            {
                //await Task.Delay(3000);
                //RemoveAlert(alert);
            }
        }
        StateHasChanged();
    }
    private async void RemoveAlert(Models.Alert alert)
    { 
        if (!alerts.Contains(alert)) return;

        if (Fade) 
        {
            alert.Fade = true;

            await Task.Delay(250);
            alerts.Remove(alert);
        } 
        else 
        {
            alerts.Remove(alert);
        }

        StateHasChanged();
    }
    private void OnLocationChange(object sender, LocationChangedEventArgs e)
    { 
        MessageAlertService.Clear(Id);
    }

    private string? CssClass(Models.Alert alert) 
    {
        if (alert == null) return null;

        var classes = new List<string> { "alert", "alert-dismissable" };

        var alertTypeClass = new Dictionary<Models.AlertType, string>();
        alertTypeClass[Models.AlertType.Success] = "alert-success";
        alertTypeClass[Models.AlertType.Error] = "alert-danger";
        alertTypeClass[Models.AlertType.Info] = "alert-info";
        alertTypeClass[Models.AlertType.Warning] = "alert-warning";

        classes.Add(alertTypeClass[alert.Type]);

        if (alert.Fade)
            classes.Add("fade");

        return string.Join(' ', classes);
    }   
}

